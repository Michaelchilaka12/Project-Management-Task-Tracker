{
	"info": {
		"_postman_id": "dc779fa4-425f-4fc6-bed0-5d34d0d8765f",
		"name": "Project Management",
		"description": "project management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34549714",
		"_collection_link": "https://www.postman.com/mission-candidate-65699771/workspace/michael-s-workspace/collection/34549714-dc779fa4-425f-4fc6-bed0-5d34d0d8765f?action=share&source=collection_link&creator=34549714"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "user signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"obi\",\r\n    \"email\":\"obi@gmail.com\",\r\n    \"password\":\"test1234\",\r\n    \"passwordConfirm\":\"test1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/signup",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"signup"
							]
						},
						"description": "## User Signup Endpoint\n\nThis endpoint allows new users to register by providing their details. It accepts a POST request with the user's information in the request body.\n\n### Request Parameters\n\nThe request body must be in JSON format and include the following parameters:\n\n- **name** (string): The full name of the user.\n    \n- **email** (string): The email address of the user. This must be a valid email format.\n    \n- **password** (string): The password chosen by the user. It should meet security requirements (e.g., minimum length).\n    \n- **passwordConfirm** (string): A confirmation of the user's password to ensure accuracy.\n    \n\n### Expected Response\n\nUpon successful registration, the API will return a response indicating the success of the operation. The response typically includes:\n\n- A success message confirming that the user has been created.\n    \n- A unique identifier for the newly created user.\n    \n\n### Notes\n\n- Ensure that the email address provided is unique and not already in use.\n    \n- Passwords must match between the `password` and `passwordConfirm` fields.\n    \n- Proper error handling will be implemented to return appropriate messages for invalid input or existing users.\n    \n\nThis endpoint is essential for user account creation and should be used during the signup process."
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"michael@gmail.com\",\r\n    \"password\":\"test1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							]
						},
						"description": "## Login User\n\nThis endpoint allows users to log in by providing their credentials. Upon successful authentication, it returns a JSON Web Token (JWT) that can be used for subsequent requests requiring authentication.\n\n### Request\n\n**Method:** POST  \n**URL:** `/api/v1/users/login`\n\n**Request Body:**  \nThe request body must be in JSON format and include the following parameters:\n\n- **email** (string): The email address of the user attempting to log in.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n\n ```\n\n### Response\n\nOn a successful login, the server responds with a status code of `200` and a JSON object containing the following fields:\n\n- **status** (string): The status of the login attempt (e.g., success or error message).\n    \n- **token** (string): The JSON Web Token to be used for authenticated requests.\n    \n- **data** (object): Contains user information:\n    \n    - **user** (object): An object representing the logged-in user, which includes:\n        \n        - **_id** (string): The unique identifier for the user.\n            \n        - **name** (string): The name of the user.\n            \n        - **email** (string): The email address of the user.\n            \n        - **role** (string): The role of the user within the application (e.g., admin, user).\n            \n        - **__v** (integer): The version key for the user document.\n            \n        - **profilePic** (string): The URL or path to the user's profile picture.\n            \n\n**Example Response:**\n\n``` json\n{\n  \"status\": \"success\",\n  \"token\": \"your_jwt_token\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"user_id\",\n      \"name\": \"User Name\",\n      \"email\": \"user@example.com\",\n      \"role\": \"user\",\n      \"__v\": 0,\n      \"profilePic\": \"url_to_profile_picture\"\n    }\n  }\n}\n\n ```\n\n### Notes\n\n- Ensure that the email and password are correctly provided to avoid authentication errors.\n    \n- The returned token should be stored securely and included in the Authorization header for future requests requiring authentication."
					},
					"response": []
				},
				{
					"name": "forgot password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"michaelchineduchilaka@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/forgotPassword",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"forgotPassword"
							]
						},
						"description": "## Forgot Password API\n\nThis endpoint allows users to initiate a password reset process by submitting their registered email address.\n\n### Request\n\n- **Method**: POST\n    \n- **URL**: `/api/v1/users/forgotPassword`\n    \n\n#### Request Body\n\nThe request body must be in JSON format and should contain the following parameter:\n\n- **email** (string): The email address associated with the user's account. This is required to identify the user for whom the password reset request is being made.\n    \n\n### Response\n\nUpon a successful request, the server will respond with a confirmation message indicating that a password reset link has been sent to the provided email address.\n\n### Notes\n\n- Ensure that the email address provided is registered in the system to receive the password reset instructions.\n    \n- If the email is not associated with any account, the response will still indicate that the request was processed, but no email will be sent for security reasons."
					},
					"response": []
				},
				{
					"name": "reset password",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"test12345\",\r\n    \"passwordConfirm\":\"test12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/resetPassword/61933b26cd0cd1f8b3a828b3e22316ec84775aad0c6310cd54996dfef9df5a99",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"resetPassword",
								"61933b26cd0cd1f8b3a828b3e22316ec84775aad0c6310cd54996dfef9df5a99"
							]
						},
						"description": "### Reset Password Endpoint\n\nThis endpoint allows users to reset their password. It is designed to be used when a user has requested to change their password, typically after a password reset request. The user must provide a new password and confirm it to ensure accuracy.\n\n#### HTTP Method\n\n`PATCH`\n\n#### Endpoint\n\n`http://localhost:3000/api/v1/users/resetPassword/{userId}`\n\n#### Request Body\n\nThe request body must be sent in JSON format and should include the following parameters:\n\n- **password** (string): The new password that the user wishes to set. It should meet the application's password requirements (e.g., length, complexity).\n    \n- **passwordConfirm** (string): A confirmation of the new password. This must match the `password` field to ensure that the user has entered it correctly.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"password\": \"newPassword123\",\n  \"passwordConfirm\": \"newPassword123\"\n}\n\n ```\n\n#### Expected Response\n\nUpon a successful password reset, the server will respond with a status indicating the success of the operation. The exact structure of the response may vary, but it typically includes a message confirming that the password has been successfully updated.\n\n**Example Response:**\n\n``` json\n{\n  \"message\": \"Password has been successfully reset.\"\n}\n\n ```\n\nEnsure that the user ID in the endpoint URL corresponds to the user whose password is being reset. If the passwords do not match or if the request is invalid, appropriate error messages will be returned."
					},
					"response": []
				}
			],
			"description": "all about the authentication"
		},
		{
			"name": "user",
			"item": [
				{
					"name": "logout user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/logout",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"logout"
							]
						},
						"description": "## Logout User\n\nThis endpoint is used to log out a user from the application. When a user sends a GET request to this endpoint, it will terminate the user's session and invalidate any authentication tokens associated with the user.\n\n### Request Format\n\n- **Method**: `GET`\n    \n- **URL**: `http://localhost:3000/api/v1/users/logout`\n    \n\nNo request body is required for this endpoint.\n\n### Response Structure\n\nOn a successful logout, the server responds with a JSON object containing the following fields:\n\n- **status**: A string that indicates the status of the logout operation.\n    \n- **message**: A string that provides additional information about the logout operation.\n    \n\n#### Example Response\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```\n\nA successful response will have a status code of `200`, indicating that the logout was processed successfully."
					},
					"response": []
				},
				{
					"name": "user photo upload",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "profilePic",
									"type": "file",
									"src": "postman-cloud:///1f08c4cd-21c7-4990-94c7-a39c6062aa79"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/v1/users/68be26692d72e31f73058a96/uploadProfilePic",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"68be26692d72e31f73058a96",
								"uploadProfilePic"
							]
						},
						"description": "## Upload Profile Picture\n\nThis endpoint allows users to upload a profile picture to the system. The request is made via an HTTP POST method to the specified URL, where the user's unique identifier is included in the path.\n\n### Request Body\n\nThe request must include a form-data body with the following parameter:\n\n- **profilePic** (file): This parameter is used to upload the profile picture. It should contain the file data of the image that the user wishes to set as their profile picture.\n    \n\n### Response Structure\n\nUpon a successful upload, the server will respond with a confirmation message indicating the status of the upload. The response will typically include:\n\n- A success message confirming that the profile picture has been uploaded.\n    \n- Any relevant metadata about the uploaded image, such as the URL where the image can be accessed.\n    \n\nEnsure that the file being uploaded meets any specified requirements regarding size and format as defined by the API documentation."
					},
					"response": []
				},
				{
					"name": "get all user",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/users",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "## GET /api/v1/users\n\nThis endpoint retrieves a list of users from the system.\n\n### Request Parameters\n\nThis endpoint does not require any query parameters.\n\n### Expected Response\n\n- **Status Code**: `403 Forbidden`\n    \n- **Content-Type**: `text/html`\n    \n- **Response Body**: The response body is empty.\n    \n\n### Notes\n\nA `403 Forbidden` status indicates that the request was valid, but the server is refusing to authorize it. This may be due to insufficient permissions or authentication issues. Ensure that the necessary credentials or permissions are provided when accessing this endpoint."
					},
					"response": []
				},
				{
					"name": "get users todo task",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/kanban/todo/68bb5dc6f7af615e12775d11",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"kanban",
								"todo",
								"68bb5dc6f7af615e12775d11"
							]
						},
						"description": "## Get Todo Item\n\nThis endpoint retrieves a specific todo item from the Kanban board using its unique identifier.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `http://localhost:3000/api/v1/kanban/todo/{id}`\n    \n- **Path Parameter**:\n    \n    - `id` (string): The unique identifier of the todo item you wish to retrieve. In this example, the id is `68bb5dc6f7af615e12775d11`.\n        \n\n### Response\n\nUpon a successful request, the server responds with a JSON object containing the details of the requested todo item. The structure of the response typically includes:\n\n- `id`: The unique identifier of the todo item.\n    \n- `title`: The title of the todo item.\n    \n- `description`: A brief description of the todo item.\n    \n- `status`: The current status of the todo item (e.g., pending, completed).\n    \n- `createdAt`: The timestamp indicating when the todo item was created.\n    \n- `updatedAt`: The timestamp indicating when the todo item was last updated.\n    \n\n### Notes\n\n- Ensure that the provided `id` is valid; otherwise, the server may return a 404 Not Found error.\n    \n- This endpoint is useful for retrieving detailed information about a specific todo item to display or edit in a user interface."
					},
					"response": []
				},
				{
					"name": "get users in progress task",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/api/v1/kanban/inProgress/68bb5dc6f7af615e12775d11",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"kanban",
								"inProgress",
								"68bb5dc6f7af615e12775d11"
							]
						},
						"description": "### Get In-Progress Kanban Item\n\nThis endpoint retrieves the details of a specific Kanban item that is currently in progress. The item is identified by its unique ID.\n\n#### Request\n\n- **Method**: GET\n    \n- **URL**: `/api/v1/kanban/inprogress/{id}`\n    \n\n#### Path Parameters\n\n- `id` (string): The unique identifier of the Kanban item you wish to retrieve. In this example, it is `68bb5dc6f7af615e12775d11`.\n    \n\n#### Response\n\nUpon a successful request, the response will contain the details of the Kanban item. The structure of the response will include various properties related to the Kanban item, such as its title, description, status, and any associated metadata.\n\n#### Notes\n\n- Ensure that the ID provided in the request exists and corresponds to an item that is currently in progress.\n    \n- This endpoint is useful for fetching the current state of a specific task within a Kanban board, allowing users to view details and updates."
					},
					"response": []
				},
				{
					"name": "get users done task",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/kanban/getdone/68bb5dc6f7af615e12775d11",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"kanban",
								"getdone",
								"68bb5dc6f7af615e12775d11"
							]
						}
					},
					"response": []
				}
			],
			"description": "all about the users"
		},
		{
			"name": "projects",
			"item": [
				{
					"name": "project creation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"taskName\":\"music\",\r\n    \"team\":[\r\n        \"68bb5dc6f7af615e12775d11\",\r\n        \"68be2a80d442c5065372ffce\"\r\n    ]\r\n    \r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"projects"
							]
						},
						"description": "## Add Project\n\nThis endpoint allows users to create a new project by submitting a POST request to the `/api/v1/projects` endpoint.\n\n### Request Method\n\n- **POST**\n    \n\n### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **taskName** (string): The name of the task associated with the project.\n    \n- **team** (array of strings): An array containing the IDs of team members assigned to the project.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"taskName\": \"music\",\n  \"team\": [\"68bb5dc6f7af615e12775d11\"]\n}\n\n ```\n\n### Expected Response\n\nUpon successful creation of the project, the API will return a response in JSON format, typically containing the details of the newly created project, including its unique identifier and any other relevant information.\n\nEnsure that the request is properly formatted and that all required parameters are included to avoid errors."
					},
					"response": []
				},
				{
					"name": "update a project",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"taskName\":\"e-commerece site\"\r\n    \r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/projects/68bb63873c4965787c578502",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"projects",
								"68bb63873c4965787c578502"
							]
						},
						"description": "### API Endpoint: Update Project\n\n**HTTP Method:** PATCH  \n**Endpoint:** `/api/v1/projects/{projectId}`\n\nThis endpoint allows you to update the details of an existing project identified by the `projectId`. In this specific case, the request is designed to modify the name of a task within a project.\n\n#### Request Body Format\n\nThe request body must be sent in JSON format and should include the following key:\n\n- **taskName** (string): The new name for the task associated with the project.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"taskName\": \"e-commerece site\"\n}\n\n ```\n\n#### Response Structure\n\nUpon a successful request, the server will respond with a representation of the updated project. The response will typically include the following fields:\n\n- **projectId**: The unique identifier for the project.\n    \n- **taskName**: The updated name of the task.\n    \n- **status**: A message indicating the success of the operation.\n    \n\n**Example Response:**\n\n``` json\n{\n  \"projectId\": \"68bb63873c4965787c578502\",\n  \"taskName\": \"e-commerece site\",\n  \"status\": \"Project updated successfully\"\n}\n\n ```\n\nEnsure that the `projectId` in the URL corresponds to an existing project in the system to avoid errors."
					},
					"response": []
				},
				{
					"name": "delete a project",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/projects/68bb67222b55b2ecb365433e",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"projects",
								"68bb67222b55b2ecb365433e"
							]
						},
						"description": "## DELETE /api/v1/projects/{projectId}\n\nThis endpoint is used to delete a specific project identified by its unique `projectId`. The deletion is permanent and will remove all associated data related to the project.\n\n### Request Parameters\n\n- **projectId** (path parameter): A unique identifier for the project that you wish to delete. This is a required parameter and must be included in the request URL.\n    \n\n### Request Body\n\nThis endpoint does not require a request body. Simply send the DELETE request to the specified URL.\n\n### Response Structure\n\nUpon successful deletion of the project, the server will respond with a status code indicating the outcome of the request. The typical response structure includes:\n\n- **status**: A string indicating the success or failure of the operation.\n    \n- **message**: A string providing additional information about the result of the operation.\n    \n\n#### Example Response\n\n``` json\n{\n  \"status\": \"success\",\n  \"message\": \"Project deleted successfully.\"\n}\n\n ```\n\nIn case of an error, the response will include relevant error information to help diagnose the issue."
					},
					"response": []
				},
				{
					"name": "get all projects",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"projects"
							]
						},
						"description": "## API Endpoint: Get Projects\n\n### Purpose\n\nThis endpoint retrieves a list of projects from the server. It is designed to provide users with access to all available project data, which can be utilized for various purposes such as project management, reporting, or analysis.\n\n### Request Method\n\n- **GET**\n    \n\n### Request URL\n\n- `http://localhost:3000/api/v1/projects`\n    \n\n### Expected Input Parameters\n\nThis endpoint does not require any input parameters in the request. However, it may support query parameters for filtering or pagination in future versions.\n\n### Response Structure\n\nUpon a successful request, the server will respond with a JSON object containing an array of project objects. Each project object may include the following fields:\n\n- `id`: Unique identifier for the project.\n    \n- `name`: The name of the project.\n    \n- `description`: A brief description of the project.\n    \n- `status`: The current status of the project (e.g., active, completed).\n    \n- `createdAt`: Timestamp indicating when the project was created.\n    \n- `updatedAt`: Timestamp indicating when the project was last updated.\n    \n\n### Example Response\n\n``` json\n{\n  \"projects\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Project Alpha\",\n      \"description\": \"Description of Project Alpha\",\n      \"status\": \"active\",\n      \"createdAt\": \"2023-01-01T00:00:00Z\",\n      \"updatedAt\": \"2023-01-10T00:00:00Z\"\n    },\n    {\n      \"id\": \"2\",\n      \"name\": \"Project Beta\",\n      \"description\": \"Description of Project Beta\",\n      \"status\": \"completed\",\n      \"createdAt\": \"2023-02-01T00:00:00Z\",\n      \"updatedAt\": \"2023-02-10T00:00:00Z\"\n    }\n  ]\n}\n\n ```\n\n### Notes\n\n- Ensure that the server is running and accessible at the specified URL before making a request.\n    \n- The response will typically return a status code of 200 OK if the request is successful.\n    \n- In case of an error, the server may return appropriate error codes and messages to help diagnose issues."
					},
					"response": []
				},
				{
					"name": "get comments on project",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/projects/68bd0030935cdd4be1ef7138",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"projects",
								"68bd0030935cdd4be1ef7138"
							]
						},
						"description": "### API Endpoint: Get Project Details\n\n**Method**: `GET`  \n**URL**: `/api/v1/projects/{projectId}`\n\n#### Purpose\n\nThis endpoint retrieves detailed information about a specific project identified by its unique `projectId`. It allows users to access project details, which may include attributes such as title, description, status, and associated metadata.\n\n#### Input Parameters\n\n- **projectId** (path parameter): A string representing the unique identifier of the project. In this case, it is `68bd0030935cdd4be1ef7138`.\n    \n\n#### Response Structure\n\nThe response will contain a JSON object with the following structure:\n\n``` json\n{\n    \"id\": \"string\",          // Unique identifier for the project\n    \"title\": \"string\",       // Title of the project\n    \"description\": \"string\", // Detailed description of the project\n    \"status\": \"string\",      // Current status of the project (e.g., active, completed)\n    \"createdAt\": \"string\",   // Timestamp of when the project was created\n    \"updatedAt\": \"string\"    // Timestamp of the last update to the project\n}\n\n ```\n\n#### Status Codes\n\n- **200 OK**: The request was successful, and the project details are returned.\n    \n- **404 Not Found**: The specified `projectId` does not exist, indicating that no project was found with the provided identifier.\n    \n- **500 Internal Server Error**: An unexpected error occurred on the server while processing the request.\n    \n\n#### Error Messages\n\nIn case of an error, the response may include an error message providing further details about the issue encountered.\n\nThis endpoint is essential for clients needing to fetch specific project information for display or further processing."
					},
					"response": []
				}
			],
			"description": "all about projects"
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "create a comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\":\"very int\",\r\n    \"rating\":4,\r\n    \"task\":[\r\n        \"68bd0030935cdd4be1ef7138\",\r\n        \"68be26692d72e31f73058a96\"\r\n    ],\r\n    \"user\":[\r\n        \"68bd062dd2233f6c8907ad6a\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/comment",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						},
						"description": "### Endpoint: POST /api/v1/comment\n\nThis endpoint allows users to submit comments related to specific tasks. It is designed to facilitate user feedback and ratings, which can be associated with particular tasks in the system.\n\n#### Request Body Format\n\nThe request should be sent in JSON format and must include the following parameters:\n\n- **comment** (string): A textual comment provided by the user. This is a required field.\n    \n- **rating** (integer): A numerical rating associated with the comment, typically on a scale (e.g., 1 to 5). This is a required field.\n    \n- **task** (array of strings): An array containing the IDs of the tasks that the comment is related to. This is a required field.\n    \n- **user** (array of strings): An array containing the IDs of the users who are making the comment. This is a required field.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"comment\": \"very int\",\n  \"rating\": 4,\n  \"task\": [\"68bd0030935cdd4be1ef7138\"],\n  \"user\": [\"68bd062dd2233f6c8907ad6a\"]\n}\n\n ```\n\n#### Expected Response\n\nUpon successful submission of a comment, the server will respond with a status code of **201 Created**. The response will be in JSON format and will include the following structure:\n\n- **status** (string): A message indicating the status of the request.\n    \n- **data** (object): Contains the details of the created comment, structured as follows:\n    \n    - **data** (object): The actual comment data that was submitted, including:\n        \n        - **comment** (string): The comment text.\n            \n        - **rating** (integer): The rating assigned to the comment.\n            \n        - **createdAt** (string): The timestamp when the comment was created.\n            \n        - **task** (array of strings): The IDs of the tasks associated with the comment.\n            \n        - **user** (array of strings): The IDs of the users who made the comment.\n            \n        - **_id** (string): The unique identifier for the comment.\n            \n        - **__v** (integer): The version key for the comment document.\n            \n        - **id** (string): An alternative identifier for the comment.\n            \n\n**Example Response:**\n\n``` json\n{\n  \"status\": \"\",\n  \"data\": {\n    \"data\": {\n      \"comment\": \"\",\n      \"rating\": 0,\n      \"createdAt\": \"\",\n      \"task\": [\"\"],\n      \"user\": [\"\"],\n      \"_id\": \"\",\n      \"__v\": 0,\n      \"id\": \"\"\n    }\n  }\n}\n\n ```\n\n#### Headers\n\nEnsure to include the following headers in your request:\n\n- `Content-Type: application/json` - Indicates that the request body format is JSON.\n    \n\nThis endpoint is crucial for gathering user feedback and improving task-related interactions within the application."
					},
					"response": []
				},
				{
					"name": "get all comments",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/comment",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						},
						"description": "## API Endpoint: Retrieve Comments\n\nThis endpoint allows users to retrieve a list of comments associated with a specific resource. The comments can provide insights or feedback related to the resource, enhancing user engagement and interaction.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `{{URL}}/api/v1/comment`\n    \n\n### Query Parameters\n\nThis endpoint may accept the following optional query parameters to filter the comments:\n\n- `postId` (integer): The ID of the post for which comments are being retrieved. This parameter helps in fetching comments related to a specific post.\n    \n\n### Response\n\nUpon a successful request, the server will respond with a JSON object containing the following structure:\n\n- `comments` (array): An array of comment objects, where each object contains:\n    \n    - `id` (integer): The unique identifier for the comment.\n        \n    - `postId` (integer): The ID of the post associated with the comment.\n        \n    - `name` (string): The name of the user who made the comment.\n        \n    - `email` (string): The email of the user who made the comment.\n        \n    - `body` (string): The content of the comment.\n        \n\n### Example Response\n\n``` json\n{\n  \"comments\": [\n    {\n      \"id\": 1,\n      \"postId\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"body\": \"This is a comment.\"\n    },\n    {\n      \"id\": 2,\n      \"postId\": 1,\n      \"name\": \"Jane Doe\",\n      \"email\": \"jane@example.com\",\n      \"body\": \"This is another comment.\"\n    }\n  ]\n}\n\n ```\n\n### Notes\n\n- Ensure that the `postId` parameter is provided if you want to filter comments for a specific post.\n    \n- The response will return an empty array if there are no comments available for the specified post."
					},
					"response": []
				},
				{
					"name": "update a comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\":\"5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/comment/68bd78f857185fd1ebb54148",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"68bd78f857185fd1ebb54148"
							]
						},
						"description": "### Update Comment Rating\n\nThis endpoint allows you to update the rating of a specific comment identified by its unique ID.\n\n- **Method**: `PATCH`\n    \n- **Endpoint**: `{{URL}}/api/v1/comment/{comment_id}`\n    \n\n#### Request Parameters\n\n- **comment_id** (path parameter): The unique identifier of the comment you wish to update. In this example, the comment ID is `68bd78f857185fd1ebb54148`.\n    \n\n#### Request Body\n\nThe request body should be in JSON format and must include the following parameter:\n\n- **rating** (string): The new rating value for the comment. In this case, the rating is set to `\"5\"`.\n    \n\n#### Expected Response Format\n\nUpon a successful update, the API will return a response indicating the result of the operation. The response typically includes:\n\n- A confirmation message or status indicating that the comment rating has been updated successfully.\n    \n- The updated comment details may also be included in the response body.\n    \n\nEnsure to handle any potential errors that may arise, such as invalid comment IDs or rating values outside the acceptable range."
					},
					"response": []
				},
				{
					"name": "delete a comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/v1/comment/68bf5de989931e49c74f5315",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"68bf5de989931e49c74f5315"
							]
						},
						"description": "## Delete Comment\n\nThis endpoint allows the user to delete a specific comment identified by its unique ID. The comment ID is provided as part of the URL path.\n\n### Request\n\n- **Method**: DELETE\n    \n- **Endpoint**: `{{URL}}/api/v1/comment/{commentId}`\n    \n- **Path Parameter**:\n    \n    - `commentId` (string): The unique identifier of the comment to be deleted. In this case, the ID is `68bf5de989931e49c74f5315`.\n        \n\n### Response\n\n- **Status Code**: `204 No Content`\n    \n    - Indicates that the request was successful and the comment has been deleted. There is no content in the response body.\n        \n- **Content-Type**: `text/xml`\n    \n    - The response content type is XML, although no actual content is returned in the body.\n        \n\n### Summary\n\nWhen this DELETE request is executed successfully, it will remove the specified comment from the system, and the user will receive a `204 No Content` status indicating that the operation was completed successfully without returning any additional information."
					},
					"response": []
				}
			]
		}
	]
}